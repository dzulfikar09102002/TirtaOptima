@using System.Globalization
@model StrategyCalculationViewModel

@{
    ViewData["Title"] = "Perhitungan Strategi";
    var kriteriaList = Model.FuzzyComparisons
        .Select(m => new { m.Kriteria1Id, m.NamaKriteria1 })
        .Distinct()
        .ToList();
}
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0">Perhitungan Strategi</h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Tirta Optima</a></li>
                    <li class="breadcrumb-item">Strategi</li>
                    <li class="breadcrumb-item active">Perhitungan</li>
                </ol>
            </div>

        </div>
    </div>
</div>
<div class="card">
    <div class="card-header pb-0">
        <ul class="nav nav-tabs nav-bordered nav-info nav-tabs-custom fw-semibold" role="tablist" id="detailTab">
            <li class="nav-item">
                <button class="nav-link active fw-semibold" data-bs-toggle="tab" data-bs-target="#tfn" type="button" role="tab">
                    Komparasi
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link fw-semibold" data-bs-toggle="tab" data-bs-target="#normalization" type="button" role="tab">
                    Normalisasi
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link fw-semibold" data-bs-toggle="tab" data-bs-target="#optimization" type="button" role="tab">
                    Optimasi
                </button>
            </li>
            <li class="nav-item">
                <button class="nav-link fw-semibold" data-bs-toggle="tab" data-bs-target="#wresult" type="button" role="tab">
                    Hasil
                </button>
            </li>
        </ul>
    </div>
    <div class="card-body">

        <div class="tab-content">
            <div class="tab-pane fade show active" id="tfn" role="tabpanel">
                <table class="table text-center table-hover">
                    <thead>
                        <tr>
                            <th></th>
                            @foreach (var k in kriteriaList)
                            {
                                <th class="align-middle">@k.NamaKriteria1</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < kriteriaList.Count; i++)
                        {
                            <tr>
                                <th class="align-middle">@kriteriaList[i].NamaKriteria1</th>
                                @for (int j = 0; j < kriteriaList.Count; j++)
                                {
                                    var index = i * kriteriaList.Count + j;

                                    if (i == j)
                                    {
                                        <td>
                                            <input type="hidden" name="[@index].Kriteria1Id" value="@kriteriaList[i].Kriteria1Id" />
                                            <input type="hidden" name="[@index].Kriteria2Id" value="@kriteriaList[j].Kriteria1Id" />
                                            <input type="text" name="[@index].InputTFN" value="1, 1, 1" class="form-control text-center" readonly />
                                        </td>
                                    }
                                    else if (i < j)
                                    {
                                        var entry = Model.FuzzyComparisons.FirstOrDefault(m =>
                                        m.Kriteria1Id == kriteriaList[i].Kriteria1Id &&
                                        m.Kriteria2Id == kriteriaList[j].Kriteria1Id
                                        );

                                        string value = entry != null
                                        ? $"{entry.L.ToString("0.####", CultureInfo.InvariantCulture)}, {entry.M.ToString("0.####", CultureInfo.InvariantCulture)}, {entry.U.ToString("0.####", CultureInfo.InvariantCulture)}"
                                        : "1.0, 1.0, 1.0";

                                        <td>
                                            <input type="hidden" name="[@index].Kriteria1Id" value="@kriteriaList[i].Kriteria1Id" />
                                            <input type="hidden" name="[@index].Kriteria2Id" value="@kriteriaList[j].Kriteria1Id" />
                                            <input type="hidden" name="[@index].InputTFN" value="@value" />

                                            <button type="button"
                                                    class="btn border border-info rounded-3 w-100 text-center py-2 waves-effect waves-light material-shadow-none"
                                                    data-k1="@kriteriaList[i].Kriteria1Id"
                                                    data-k2="@kriteriaList[j].Kriteria1Id"
                                                    onclick="InputFromElement(this)">
                                                @value
                                            </button>
                                        </td>
                                    }
                                    else
                                    {
                                        var sourceEntry = Model.FuzzyComparisons.FirstOrDefault(m =>
                                        m.Kriteria1Id == kriteriaList[j].Kriteria1Id &&
                                        m.Kriteria2Id == kriteriaList[i].Kriteria1Id
                                        );

                                        string value = "1, 1, 1";
                                        if (sourceEntry != null)
                                        {

                                            var l = 1 / sourceEntry.U;
                                            var m = 1 / sourceEntry.M;
                                            var u = 1 / sourceEntry.L;
                                            value = $"{Math.Round(l, 4).ToString("0.####", CultureInfo.InvariantCulture)}, {Math.Round(m, 4).ToString("0.####", CultureInfo.InvariantCulture)}, {Math.Round(u, 4).ToString("0.####", CultureInfo.InvariantCulture)}";
                                        }

                                        <td>
                                            <input type="hidden" name="[@index].Kriteria1Id" value="@kriteriaList[i].Kriteria1Id" />
                                            <input type="hidden" name="[@index].Kriteria2Id" value="@kriteriaList[j].Kriteria1Id" />
                                            <input type="hidden" name="[@index].InputTFN" value="@value" />
                                            <button type="button"
                                                    class="btn border border-info rounded-3 w-100 text-center py-2 waves-effect waves-light material-shadow-none"
                                                    data-k1="@kriteriaList[i].Kriteria1Id"
                                                    data-k2="@kriteriaList[j].Kriteria1Id"
                                                    onclick="InputFromElement(this)">
                                                @value
                                            </button>
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                <form asp-action="Calculate" method="post" id="formPerhitungan">
                    <div class="d-flex justify-content-end align-items-center gap-2">
                        <button type="button" class="btn btn-success" onclick="Calculate()">Hitung Bobot</button>
                    </div>
                </form>
            </div>

            <div class="tab-pane fade" id="normalization" role="tabpanel">
                <div class="table-responsive">
                    <table class="table table-bordered text-center">
                        <thead class="table-info">
                            <tr>
                                <th>Nama Kriteria</th>
                                <th>Geom L</th>
                                <th>Geom M</th>
                                <th>Geom U</th>
                                <th>Hasil Normalisasi</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.NormalisasiDetails)
                            {
                                <tr>
                                    <td>@item.NamaKriteria</td>
                                    <td>@item.GeomL.ToString("0.0000")</td>
                                    <td>@item.GeomM.ToString("0.0000")</td>
                                    <td>@item.GeomU.ToString("0.0000")</td>
                                    <td><b>@item.Normalized.ToString("0.0000")</b></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="tab-pane fade" id="optimization" role="tabpanel">
                <div class="mt-3">
                    <h6 class="text-center mb-3 fw-bold">Tren Fitness per Iterasi</h6>
                    <canvas id="fitnessChart" height="120"></canvas>
                </div>
                <div class="table-responsive">
                    <table class="table table-bordered text-center" id="tbl">
                        <thead class="table-warning">
                            <tr>
                                <th>Iterasi</th>
                                @for (int i = 0; i < Model.CriteriaNames.Count; i++)
                                {
                                    <th>@($"W{i + 1}")</th>
                                }
                                <th>Fitness</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.PsoLogs)
                            {
                                <tr>
                                    <td>@item.Iteration</td>
                                    @foreach (var w in item.Weights)
                                    {
                                        <td>@w.ToString("0.0000")</td>
                                    }
                                    <td><b>@item.Fitness.ToString("0.0000")</b></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            @{
                                var best = Model.PsoLogs.OrderByDescending(x => x.Fitness).FirstOrDefault();
                                if (best != null)
                                {
                                    <tr class="fw-bold table-success">
                                        <td class="text-center">Terbaik (@best.Iteration)</td>
                                        @foreach (var w in best.Weights)
                                        {
                                            <td>@w.ToString("0.0000")</td>
                                        }
                                        <td class="text-center">@best.Fitness.ToString("0.0000")</td>
                                    </tr>
                                }
                            }
                        </tfoot>
                    </table>                   
                </div>
            </div>
            <div class="tab-pane fade" id="wresult" role="tabpanel">
                <div class="table-responsive">
                    <table class="table table-bordered text-center">
                        <thead class="table-success">
                            <tr>
                                <th width="10%">Peringkat
                                <th>Nama Kriteria</th>
                                <th>Bobot</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int rank = 1;
                                foreach (var item in Model.Criterias.OrderByDescending(c => c.Bobot))
                                {
                                    <tr>
                                        <td><strong>@rank</strong></td>
                                        <td>@(item.Name ?? $"Kriteria {item.Id}")</td>
                                        <td><b>@(item.Bobot?.ToString("0.0000") ?? "-")</b></td>
                                    </tr>
                                    rank++;
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            $("#sidebarMultilevel5").addClass('show')
            $('#tbl').DataTable();
            const activeTab = localStorage.getItem("activeTab");
            if (activeTab) {
                const tabTrigger = new bootstrap.Tab(document.querySelector(`#detailTab button[data-bs-target="${activeTab}"]`));
                tabTrigger.show();
                localStorage.removeItem("activeTab"); 
            }
        });
        function InputFromElement(button) {
            const k1 = $(button).data("k1");
            const k2 = $(button).data("k2");
            Input(k1, k2);
        }

        function Input(kriteria1Id, kriteria2Id) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("Input")',
                data: {
                    kriteria1Id: kriteria1Id,
                    kriteria2Id: kriteria2Id
                },
                success: function (data) {
                    $("#staticBackdropCenter .modal-title").html("Perbandingan Kriteria");
                    $("#staticBackdropCenter .modal-body").html(data);
                    $("#staticBackdropCenter").modal('show');
                },
                error: function () {
                    alert("Terjadi kesalahan saat memuat form input.");
                }
            });
        }
        function Calculate() {
            var formData = new FormData($("#formPerhitungan")[0]);
            var t = $("input[name='__RequestVerificationToken']").val();
            $.ajax({
                url: $("#formPerhitungan").attr('action'),
                type: "POST",
                data: formData,
                dataType: "json",
                contentType: false,
                processData: false,
                headers:
                {
                    "RequestVerificationToken": t
                },
                beforeSend: function () {
                    $("#loader").show()
                },
                complete: function () { $("#loader").hide(); },
                success: function (resp) {
                    if (resp.status == 1) {
                        Swal.fire({
                            icon: 'success',
                            title: '<b>Info</b>',
                            text: resp.message,
                            timer: 1000,
                            showConfirmButton: false,
                        }).then(() => {
                            // Simpan info bahwa setelah reload harus buka tab Hasil
                            localStorage.setItem("activeTab", "#wresult");
                            window.location.reload();
                        });
                    }
                    else {
                        Swal.fire({
                            icon: 'warning',
                            title: '<b style="color:orange">Peringatan</b>',
                            text: resp.message,
                        })
                    }
                }
            })

        }
        document.addEventListener("DOMContentLoaded", function () {
            var labels = JSON.parse('@Html.Raw(Json.Serialize(Model.PsoLogs.Select(p => $"Iterasi {p.Iteration}")))');
            var data = JSON.parse('@Html.Raw(Json.Serialize(Model.PsoLogs.Select(p => p.Fitness)))');

            if (labels.length > 0 && data.length > 0) {
                const ctx = document.getElementById('fitnessChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Fitness',
                            data: data,
                            fill: true,
                            borderColor: 'rgb(40, 167, 69)',
                            backgroundColor: 'rgba(40, 167, 69, 0.3)',
                            tension: 0.3,
                            pointRadius: 3
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'Fitness' }
                            },
                            x: {
                                title: { display: true, text: 'Iterasi' }
                            }
                        }
                    }
                });
            }
        });
    </script>
}